name: W3C HTML Validator with Gemini AI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Weekly check on Sundays

jobs:
  w3c-validator:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4

      - name: üõ† Install jq, curl, tree
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl tree

      - name: üïí Set Report Timestamp (Sri Lanka)
        id: set-time
        run: |
          export TZ=Asia/Colombo
          timestamp=$(date +'%Y-%m-%d-%H-%M')
          echo "timestamp=$timestamp" >> $GITHUB_OUTPUT
          echo "Report timestamp: $timestamp"

      - name: üîç Find HTML Files
        id: discover-html
        run: |
          html_files=$(find . -type f -name "*.html" | head -100)
          echo "html_files<<EOF" >> $GITHUB_ENV
          echo "$html_files" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: ‚úÖ Validate HTML Files and Save Report
        run: |
          mkdir -p html-validation-report
          echo "# üß™ W3C HTML Validation Summary" > html-validation-report/summary.md
          echo "**Generated on:** $(TZ=Asia/Colombo date)" >> html-validation-report/summary.md
          echo -e "\n---\n" >> html-validation-report/summary.md

          echo "" > html-validation-report/messages-for-ai.txt

          total_errors=0
          total_warnings=0

          for file in $html_files; do
            echo "## üîç Validating: \`$file\`" | tee -a html-validation-report/summary.md
            response_file="html-validation-report/$(basename "$file" .html)_response.json"

            curl -s -X POST \
              -H "Content-Type: text/html; charset=utf-8" \
              --data-binary @"$file" \
              "https://validator.w3.org/nu/?out=json" > "$response_file"

            if ! jq empty "$response_file" 2>/dev/null; then
              echo "‚ùå **Failed to validate $file (invalid response)**" | tee -a html-validation-report/summary.md
              continue
            fi

            errors=$(jq '.messages | map(select(.type == "error")) | length' "$response_file")
            warnings=$(jq '.messages | map(select(.type == "info")) | length' "$response_file")

            total_errors=$((total_errors + errors))
            total_warnings=$((total_warnings + warnings))

            echo "- ‚ùå **$errors errors**, ‚ö†Ô∏è **$warnings warnings**" | tee -a html-validation-report/summary.md

            if [ "$errors" -gt 0 ] || [ "$warnings" -gt 0 ]; then
              echo "File: $file" >> html-validation-report/messages-for-ai.txt
              jq -r '.messages[] | "\(.type | ascii_upcase): Line \(.lastLine // "N/A") Col \(.lastColumn // "N/A"): \(.message)"' \
                "$response_file" >> html-validation-report/messages-for-ai.txt
              echo "" >> html-validation-report/messages-for-ai.txt

              echo "### Validation Issues:" >> html-validation-report/summary.md
              jq -r '.messages[] | "- **\(.type | ascii_upcase):** Line \(.lastLine // "N/A") Col \(.lastColumn // "N/A"): \(.message)"' \
                "$response_file" >> html-validation-report/summary.md || echo "- **ERROR:** Failed to parse detailed messages" >> html-validation-report/summary.md
            fi

            echo "" >> html-validation-report/summary.md
          done

          echo "---" >> html-validation-report/summary.md
          echo "## üìä Summary" >> html-validation-report/summary.md
          echo "- **Total Errors:** ‚ùå $total_errors" >> html-validation-report/summary.md
          echo "- **Total Warnings:** ‚ö†Ô∏è $total_warnings" >> html-validation-report/summary.md
          echo "total_errors=$total_errors" >> $GITHUB_ENV
          echo "total_warnings=$total_warnings" >> $GITHUB_ENV

      - name: ü§ñ Ask Gemini for Suggestions
        if: ${{ env.total_errors > 0 || env.total_warnings > 0 }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          if [ ! -s html-validation-report/messages-for-ai.txt ]; then
            echo "‚úÖ No issues to send to Gemini."
            exit 0
          fi

          echo "${{ vars.GEMINI_PROMPT }}" > prompt.txt
          cat html-validation-report/messages-for-ai.txt >> prompt.txt
          prompt_text=$(cat prompt.txt)

          json_payload=$(jq -n \
            --arg text "$prompt_text" \
            '{
              contents: [{ parts: [{ text: $text }] }],
              generationConfig: {
                temperature: 0.3,
                maxOutputTokens: 2048
              }
            }')

          echo "Sending request to Gemini..."

          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$json_payload" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY")

          echo "$response" > html-validation-report/gemini-raw-response.json

          suggestions=$(echo "$response" | jq -r '[.candidates[0].content.parts[]?.text] | join("\n\n") // empty')

          if [ -n "$suggestions" ]; then
            echo "## ü§ñ Gemini AI Suggestions" >> html-validation-report/summary.md
            echo "$suggestions" >> html-validation-report/summary.md
          else
            echo "## ‚ö†Ô∏è AI Suggestions Unavailable" >> html-validation-report/summary.md
            echo "Could not retrieve suggestions." >> html-validation-report/summary.md
            echo "**Error:** $(echo "$response" | jq -r '.error.message // "No details"')" >> html-validation-report/summary.md
          fi

      - name: üì§ Upload Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: w3c-validator-report-${{ steps.set-time.outputs.timestamp }}
          path: html-validation-report/
          retention-days: 30

      - name: üí¨ Comment on Pull Request
        if: ${{ github.event_name == 'pull_request' && (env.total_errors > 0 || env.total_warnings > 0) }} 
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('html-validation-report/summary.md', 'utf8');
            const body = summary.length > 65000 ? summary.substring(0, 65000) + '\\n\\n... (truncated)' : summary;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üß™ W3C HTML Validation Results\\n\\n${body}`
            });

      - name: ‚ùå Fail if Errors Exist
        if: ${{ env.total_errors > 0 }}
        run: |
          echo "‚ùå HTML validation failed with $total_errors errors"
          exit 1